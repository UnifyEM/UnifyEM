basePath: /api/v1
definitions:
  schema.API400:
    properties:
      code:
        example: 400
        type: integer
      details:
        example: bad request
        type: string
      status:
        example: error
        type: string
    type: object
  schema.API401:
    properties:
      code:
        example: 401
        type: integer
      details:
        example: authentication failed
        type: string
      status:
        example: error
        type: string
    type: object
  schema.API404:
    properties:
      code:
        example: 404
        type: integer
      details:
        example: object not found
        type: string
      status:
        example: error
        type: string
    type: object
  schema.API500:
    properties:
      code:
        example: 500
        type: integer
      details:
        example: internal server error
        type: string
      status:
        example: error
        type: string
    type: object
  schema.APICmdResponse:
    properties:
      code:
        example: 200
        type: integer
      details:
        example: request queued for agent
        type: string
      request_id:
        example: R-6f9dcb2e-2e1b-4c3a-8a67-5b3e0d740df6
        type: string
      status:
        example: ok
        type: string
    type: object
  schema.APIConfigResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        additionalProperties:
          type: string
        type: object
      details:
        example: Config set retrieved
        type: string
      status:
        example: ok
        type: string
    type: object
  schema.APIEventsResponse:
    properties:
      code:
        example: 200
        type: integer
      data:
        items:
          $ref: '#/definitions/schema.AgentEvent'
        type: array
      details:
        example: events
        type: string
      status:
        example: ok
        type: string
    type: object
  schema.APIGenericResponse:
    properties:
      code:
        description: HTTP status code
        example: 200
        type: integer
      details:
        description: Optional response details
        example: request processed
        type: string
      status:
        description: API status response - see schema/apiMeta.go
        example: ok
        type: string
    type: object
  schema.APILoginResponse:
    properties:
      access_token:
        description: JWT access token
        example: jwt
        type: string
      code:
        description: HTTP status code
        example: 200
        type: integer
      refresh_token:
        description: JTW refresh token
        example: jwt
        type: string
      status:
        description: Text Status
        example: ok
        type: string
    type: object
  schema.APIRegisterResponse:
    properties:
      access_token:
        type: string
      agent_id:
        type: string
      code:
        type: integer
      details:
        type: string
      refresh_token:
        type: string
      status:
        type: string
    type: object
  schema.APIReportResponse:
    properties:
      code:
        type: integer
      details:
        type: string
      report:
        $ref: '#/definitions/schema.Report'
      status:
        type: string
    type: object
  schema.APIRequestStatusResponse:
    properties:
      code:
        type: integer
      details:
        type: string
      report:
        $ref: '#/definitions/schema.AgentRequestRecordList'
      status:
        type: string
    type: object
  schema.APISyncResponse:
    properties:
      code:
        type: integer
      conf:
        additionalProperties:
          type: string
        type: object
      details:
        type: string
      requests:
        description: Requests for the agent to process and respond to
        items:
          $ref: '#/definitions/schema.AgentRequest'
        type: array
      status:
        type: string
      triggers:
        $ref: '#/definitions/schema.AgentTriggers'
    type: object
  schema.APITokenRefreshResponse:
    properties:
      access_token:
        description: JWT access token
        example: jwt
        type: string
      code:
        description: HTTP status code
        example: 200
        type: integer
      status:
        description: Text Status
        example: ok
        type: string
    type: object
  schema.AgentEvent:
    properties:
      agent_id:
        type: string
      details:
        additionalProperties:
          type: string
        type: object
      event:
        type: string
      event_id:
        type: string
      time:
        type: string
      type:
        type: string
    type: object
  schema.AgentMessage:
    properties:
      agent_id:
        description: The ID of the agent
        type: string
      message:
        description: The message itself
        type: string
      message_type:
        description: Kind of message (avoiding Type as it is a reserved word)
        type: string
      sent:
        description: Timestamp of when the message was sent
        type: string
    type: object
  schema.AgentMeta:
    properties:
      active:
        type: boolean
      agent_id:
        type: string
      build:
        type: integer
      first_seen:
        type: string
      friendly_name:
        type: string
      last_ip:
        type: string
      last_seen:
        type: string
      status:
        $ref: '#/definitions/schema.AgentStatus'
      tags:
        items:
          type: string
        type: array
      triggers:
        $ref: '#/definitions/schema.AgentTriggers'
      users:
        items:
          type: string
        type: array
      version:
        type: string
    type: object
  schema.AgentRegisterRequest:
    properties:
      build:
        type: integer
      token:
        type: string
      version:
        type: string
    type: object
  schema.AgentRequest:
    properties:
      ack_required:
        type: boolean
      agent_id:
        type: string
      created:
        type: string
      parameters:
        additionalProperties:
          type: string
        type: object
      request:
        type: string
      request_id:
        type: string
      requester:
        type: string
    type: object
  schema.AgentRequestRecord:
    properties:
      ack_required:
        type: boolean
      agent:
        type: string
      agent_id:
        type: string
      cancelled:
        type: boolean
      last_updated:
        type: string
      parameters:
        additionalProperties:
          type: string
        type: object
      request_id:
        type: string
      requester:
        type: string
      response_data: {}
      response_details:
        type: string
      send_count:
        type: integer
      status:
        type: string
      time_created:
        type: string
    type: object
  schema.AgentRequestRecordList:
    properties:
      requests:
        items:
          $ref: '#/definitions/schema.AgentRequestRecord'
        type: array
    type: object
  schema.AgentResponse:
    properties:
      cmd:
        type: string
      data: {}
      request_id:
        type: string
      response:
        type: string
      success:
        type: boolean
    type: object
  schema.AgentStatus:
    properties:
      details:
        additionalProperties:
          type: string
        type: object
      last_updated:
        type: string
    type: object
  schema.AgentSyncRequest:
    properties:
      build:
        type: integer
      messages:
        items:
          $ref: '#/definitions/schema.AgentMessage'
        type: array
      responses:
        description: List of responses to previous requests
        items:
          $ref: '#/definitions/schema.AgentResponse'
        type: array
      version:
        type: string
    type: object
  schema.AgentTagsRequest:
    properties:
      tags:
        items:
          type: string
        type: array
    type: object
  schema.AgentTagsResponse:
    properties:
      code:
        type: integer
      status:
        type: string
      tags:
        items:
          type: string
        type: array
    type: object
  schema.AgentTriggers:
    properties:
      lost:
        example: false
        type: boolean
      uninstall:
        example: false
        type: boolean
      wipe:
        example: false
        type: boolean
    type: object
  schema.AgentUsersRequest:
    properties:
      users:
        items:
          type: string
        type: array
    type: object
  schema.AgentUsersResponse:
    properties:
      code:
        type: integer
      status:
        type: string
      users:
        items:
          type: string
        type: array
    type: object
  schema.AgentsByTagResponse:
    properties:
      agents:
        items:
          $ref: '#/definitions/schema.AgentMeta'
        type: array
      code:
        type: integer
      status:
        type: string
    type: object
  schema.CmdRequest:
    properties:
      args:
        additionalProperties:
          type: string
        type: object
      cmd:
        type: string
    type: object
  schema.ConfigRequest:
    properties:
      parameters:
        additionalProperties:
          type: string
        type: object
    type: object
  schema.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  schema.RefreshRequest:
    properties:
      refresh_token:
        type: string
    type: object
  schema.Report:
    properties:
      data:
        items:
          type: integer
        type: array
      name:
        type: string
      type:
        type: string
    type: object
  schema.ReportRequest:
    properties:
      args:
        additionalProperties:
          type: string
        type: object
      report:
        type: string
    type: object
  schema.UserCreateRequest:
    properties:
      display_name:
        type: string
      email:
        type: string
      user:
        type: string
    type: object
  schema.UserCreateResponse:
    properties:
      code:
        type: integer
      status:
        type: string
      user:
        $ref: '#/definitions/schema.UserMeta'
    type: object
  schema.UserDeleteResponse:
    properties:
      code:
        type: integer
      status:
        type: string
    type: object
  schema.UserList:
    properties:
      code:
        example: 200
        type: integer
      status:
        example: ok
        type: string
      users:
        items:
          $ref: '#/definitions/schema.UserMeta'
        type: array
    type: object
  schema.UserMeta:
    properties:
      created_at:
        example: "2023-01-01T00:00:00Z"
        type: string
      display_name:
        example: Alice Smith
        type: string
      email:
        example: alice@example.com
        type: string
      last_updated:
        example: "2023-01-01T00:00:00Z"
        type: string
      user:
        example: alice
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Unified Endpoint Management Server
  title: UEM-Server
  version: "0.1"
paths:
  /agent/{id}:
    delete:
      description: Deletes an agent by ID
      parameters:
      - description: Agent ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIGenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.API404'
      security:
      - BearerAuth: []
      summary: Delete agent
      tags:
      - Agent management
    get:
      description: Retrieves agent information with optional ID
      parameters:
      - description: Agent ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIGenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.API404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.API500'
      security:
      - BearerAuth: []
      summary: Get agent information
      tags:
      - Agent management
    post:
      consumes:
      - application/json
      description: updates an agent by ID
      parameters:
      - description: Agent ID
        in: path
        name: id
        required: true
        type: string
      - description: Agent data
        in: body
        name: agent
        required: true
        schema:
          $ref: '#/definitions/schema.AgentMeta'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIGenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.API404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.API500'
      security:
      - BearerAuth: []
      summary: Update agent information
      tags:
      - Agent management
    put:
      consumes:
      - application/json
      description: updates an agent by ID
      parameters:
      - description: Agent ID
        in: path
        name: id
        required: true
        type: string
      - description: Agent data
        in: body
        name: agent
        required: true
        schema:
          $ref: '#/definitions/schema.AgentMeta'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIGenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.API404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.API500'
      security:
      - BearerAuth: []
      summary: Update agent information
      tags:
      - Agent management
  /agent/{id}/tags:
    get:
      description: Retrieves the list of tags for the specified agent
      parameters:
      - description: Agent ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.AgentTagsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.API404'
      security:
      - BearerAuth: []
      summary: List agent tags
      tags:
      - Agent management
  /agent/{id}/tags/add:
    post:
      consumes:
      - application/json
      description: Adds one or more tags to the specified agent (duplicates ignored)
      parameters:
      - description: Agent ID
        in: path
        name: id
        required: true
        type: string
      - description: Tags to add
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/schema.AgentTagsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.AgentTagsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.API404'
      security:
      - BearerAuth: []
      summary: Add tags to agent
      tags:
      - Agent management
  /agent/{id}/tags/remove:
    post:
      consumes:
      - application/json
      description: Removes one or more tags from the specified agent (case-insensitive)
      parameters:
      - description: Agent ID
        in: path
        name: id
        required: true
        type: string
      - description: Tags to remove
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/schema.AgentTagsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.AgentTagsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.API404'
      security:
      - BearerAuth: []
      summary: Remove tags from agent
      tags:
      - Agent management
  /agent/{id}/users/add:
    post:
      consumes:
      - application/json
      description: Adds one or more users to the specified agent (duplicates ignored,
        users must exist)
      parameters:
      - description: Agent ID
        in: path
        name: id
        required: true
        type: string
      - description: Users to add
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/schema.AgentUsersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.AgentUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.API404'
      security:
      - BearerAuth: []
      summary: Add users to agent
      tags:
      - Agent management
  /agent/{id}/users/remove:
    post:
      consumes:
      - application/json
      description: Removes one or more users from the specified agent
      parameters:
      - description: Agent ID
        in: path
        name: id
        required: true
        type: string
      - description: Users to remove
        in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/schema.AgentUsersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.AgentUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.API404'
      security:
      - BearerAuth: []
      summary: Remove users from agent
      tags:
      - Agent management
  /agent/by-tag/{tag}:
    get:
      description: Retrieves all agents that have the specified tag (case-insensitive). Use tag='all' to retrieve all agents.
      parameters:
      - description: Tag (use 'all' for all agents)
        in: path
        name: tag
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.AgentsByTagResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.API404'
      security:
      - BearerAuth: []
      summary: Get agents by tag
      tags:
      - Agent management
  /cmd:
    post:
      consumes:
      - application/json
      description: Creates and queues a command request for an agent
      parameters:
      - description: Command request
        in: body
        name: cmdRequest
        required: true
        schema:
          $ref: '#/definitions/schema.CmdRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APICmdResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.API404'
      security:
      - BearerAuth: []
      summary: Send command to agent
      tags:
      - Agent management
  /config/agents:
    get:
      description: Retrieves the current global agent configuration
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIConfigResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
      security:
      - BearerAuth: []
      summary: Retrieve global agent configuration
      tags:
      - Configuration
    post:
      consumes:
      - application/json
      description: Updates the global agent configuration
      parameters:
      - description: Agent configuration
        in: body
        name: configAgents
        required: true
        schema:
          $ref: '#/definitions/schema.ConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIGenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
      security:
      - BearerAuth: []
      summary: Update global agent configuration
      tags:
      - Configuration
    put:
      consumes:
      - application/json
      description: Updates the global agent configuration
      parameters:
      - description: Agent configuration
        in: body
        name: configAgents
        required: true
        schema:
          $ref: '#/definitions/schema.ConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIGenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
      security:
      - BearerAuth: []
      summary: Update global agent configuration
      tags:
      - Configuration
  /config/server:
    get:
      description: Retrieves the current server configuration
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIConfigResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
      security:
      - BearerAuth: []
      summary: Retrieve server configuration
      tags:
      - Configuration
    post:
      consumes:
      - application/json
      description: Updates the server configuration
      parameters:
      - description: Server configuration
        in: body
        name: configServer
        required: true
        schema:
          $ref: '#/definitions/schema.ConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIGenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
      security:
      - BearerAuth: []
      summary: Update server configuration
      tags:
      - Configuration
    put:
      consumes:
      - application/json
      description: Updates the server configuration
      parameters:
      - description: Server configuration
        in: body
        name: configServer
        required: true
        schema:
          $ref: '#/definitions/schema.ConfigRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIGenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
      security:
      - BearerAuth: []
      summary: Update server configuration
      tags:
      - Configuration
  /events:
    get:
      description: Retrieves server events
      parameters:
      - description: Start date in YYYYMMDD format
        in: query
        name: start
        type: string
      - description: End date in YYYYMMDD format
        in: query
        name: end
        type: string
      - description: Start time in Unix timestamp format
        in: query
        name: start_time
        type: string
      - description: End time in Unix timestamp format
        in: query
        name: end_time
        type: string
      - description: Agent ID
        in: query
        name: agent_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/schema.APIEventsResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.API500'
      security:
      - BearerAuth: []
      summary: Retrieve events
      tags:
      - Events
  /files/list:
    post:
      description: Creates deploy.json containing names and hashes of uem-* files
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIGenericResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.API500'
      security:
      - BearerAuth: []
      summary: Generate deploy.json
      tags:
      - Files
    put:
      description: Creates deploy.json containing names and hashes of uem-* files
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIGenericResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.API500'
      security:
      - BearerAuth: []
      summary: Generate deploy.json
      tags:
      - Files
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return access and refresh tokens
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/schema.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful
          schema:
            $ref: '#/definitions/schema.APILoginResponse'
        "401":
          description: Authentication failed
          schema:
            $ref: '#/definitions/schema.API401'
      summary: User authentication
      tags:
      - Authentication
  /ping:
    get:
      description: Pinging the server tests authentication and communication
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIGenericResponse'
      security:
      - BearerAuth: []
      summary: Ping the server
      tags:
      - Testing
  /refresh:
    post:
      consumes:
      - application/json
      description: Refreshes a user authentication token
      parameters:
      - description: Refresh request
        in: body
        name: refreshRequest
        required: true
        schema:
          $ref: '#/definitions/schema.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APITokenRefreshResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
      summary: Refresh token
      tags:
      - Authentication
  /regToken:
    get:
      description: Retrieves the current registration token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIGenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.API500'
      security:
      - BearerAuth: []
      summary: Retrieve registration token
      tags:
      - '"Registration token"'
    post:
      description: Creates a new registration token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIGenericResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.API500'
      security:
      - BearerAuth: []
      summary: Create new registration token
      tags:
      - '"Registration token"'
  /register:
    post:
      consumes:
      - application/json
      description: Agent requests registration and receives access and refresh tokens
      parameters:
      - description: Agent sync request
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/schema.AgentRegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIRegisterResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
      summary: Agent registration
      tags:
      - Agent communication
  /report:
    post:
      consumes:
      - application/json
      description: Generates a report on the system
      parameters:
      - description: Report request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/schema.ReportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIReportResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.API404'
      security:
      - BearerAuth: []
      summary: Generate report
      tags:
      - Reporting
  /request/{id}:
    delete:
      description: Deletes a request by ID
      parameters:
      - description: Request ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIGenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.API404'
      security:
      - BearerAuth: []
      summary: Delete request
      tags:
      - Agent management
    get:
      description: Obtain information about one or more requests sent to agents This
        includes the status and agent response, if any.
      parameters:
      - description: Request ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIRequestStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.API404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.API500'
      security:
      - BearerAuth: []
      summary: Retrieve request status information
      tags:
      - Agent management
  /reset/{id}:
    post:
      description: Resets triggers for the specified agent. With respect to the "wipe"
        and "uninstall" triggers, this is only useful before the agent's next sync
        with the server.
      parameters:
      - description: Agent ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIGenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.API404'
      security:
      - BearerAuth: []
      summary: Reset agent triggers
      tags:
      - Agent management
    put:
      description: Resets triggers for the specified agent. With respect to the "wipe"
        and "uninstall" triggers, this is only useful before the agent's next sync
        with the server.
      parameters:
      - description: Agent ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APIGenericResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.API404'
      security:
      - BearerAuth: []
      summary: Reset agent triggers
      tags:
      - Agent management
  /sync:
    post:
      consumes:
      - application/json
      description: Agent syncs with the server to send and receive messages
      parameters:
      - description: Agent sync request
        in: body
        name: syncRequest
        required: true
        schema:
          $ref: '#/definitions/schema.AgentSyncRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.APISyncResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
      security:
      - BearerAuth: []
      summary: Agent sync with server
      tags:
      - Agent communication
  /user:
    get:
      description: Retrieves a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.UserList'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.API500'
      security:
      - BearerAuth: []
      summary: List all users
      tags:
      - User management
    post:
      consumes:
      - application/json
      description: Adds a new user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/schema.UserCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.UserCreateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/schema.API400'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.API500'
      security:
      - BearerAuth: []
      summary: Add a new user
      tags:
      - User management
  /user/{id}:
    delete:
      description: Deletes a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.UserDeleteResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.API404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.API500'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - User management
    get:
      description: Retrieves information for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.UserMeta'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/schema.API400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/schema.API401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/schema.API404'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/schema.API500'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - User management
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
